// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mqttsendclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MqttSendClient is the client API for MqttSend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqttSendClient interface {
	// 给泰无忧发送信息
	TwyMqttSend(ctx context.Context, in *TwyMqttSendReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type mqttSendClient struct {
	cc grpc.ClientConnInterface
}

func NewMqttSendClient(cc grpc.ClientConnInterface) MqttSendClient {
	return &mqttSendClient{cc}
}

func (c *mqttSendClient) TwyMqttSend(ctx context.Context, in *TwyMqttSendReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/mqttsendclient.MqttSend/TwyMqttSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqttSendServer is the server API for MqttSend service.
// All implementations must embed UnimplementedMqttSendServer
// for forward compatibility
type MqttSendServer interface {
	// 给泰无忧发送信息
	TwyMqttSend(context.Context, *TwyMqttSendReq) (*CommonResp, error)
	mustEmbedUnimplementedMqttSendServer()
}

// UnimplementedMqttSendServer must be embedded to have forward compatible implementations.
type UnimplementedMqttSendServer struct {
}

func (UnimplementedMqttSendServer) TwyMqttSend(context.Context, *TwyMqttSendReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwyMqttSend not implemented")
}
func (UnimplementedMqttSendServer) mustEmbedUnimplementedMqttSendServer() {}

// UnsafeMqttSendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqttSendServer will
// result in compilation errors.
type UnsafeMqttSendServer interface {
	mustEmbedUnimplementedMqttSendServer()
}

func RegisterMqttSendServer(s grpc.ServiceRegistrar, srv MqttSendServer) {
	s.RegisterService(&MqttSend_ServiceDesc, srv)
}

func _MqttSend_TwyMqttSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwyMqttSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqttSendServer).TwyMqttSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mqttsendclient.MqttSend/TwyMqttSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqttSendServer).TwyMqttSend(ctx, req.(*TwyMqttSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MqttSend_ServiceDesc is the grpc.ServiceDesc for MqttSend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MqttSend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mqttsendclient.MqttSend",
	HandlerType: (*MqttSendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TwyMqttSend",
			Handler:    _MqttSend_TwyMqttSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mqttsend.proto",
}
