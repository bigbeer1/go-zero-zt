// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package archiveclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchiveClient is the client API for Archive service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveClient interface {
	// 用户日志
	AppLoggerAdd(ctx context.Context, in *AppLoggerAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	AppLoggerFindList(ctx context.Context, in *AppLoggerFindListReq, opts ...grpc.CallOption) (*AppLoggerFindListResp, error)
	// 自定义任务日志
	ScheduledTasksLogFindList(ctx context.Context, in *ScheduledTasksLogFindListReq, opts ...grpc.CallOption) (*ScheduledTasksLogFindListResp, error)
	// 重试任务日志
	ScheduledTasksFailureRecordLogFindList(ctx context.Context, in *ScheduledTasksLogFindListReq, opts ...grpc.CallOption) (*ScheduledTasksLogFindListResp, error)
	// 告警日志
	AlarmLogFindList(ctx context.Context, in *AlarmLogFindListReq, opts ...grpc.CallOption) (*AlarmLogFindListResp, error)
	// 告警更新状态
	AlarmUpState(ctx context.Context, in *AlarmUpStateReq, opts ...grpc.CallOption) (*CommonResp, error)
}

type archiveClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveClient(cc grpc.ClientConnInterface) ArchiveClient {
	return &archiveClient{cc}
}

func (c *archiveClient) AppLoggerAdd(ctx context.Context, in *AppLoggerAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/AppLoggerAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) AppLoggerFindList(ctx context.Context, in *AppLoggerFindListReq, opts ...grpc.CallOption) (*AppLoggerFindListResp, error) {
	out := new(AppLoggerFindListResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/AppLoggerFindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ScheduledTasksLogFindList(ctx context.Context, in *ScheduledTasksLogFindListReq, opts ...grpc.CallOption) (*ScheduledTasksLogFindListResp, error) {
	out := new(ScheduledTasksLogFindListResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/ScheduledTasksLogFindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) ScheduledTasksFailureRecordLogFindList(ctx context.Context, in *ScheduledTasksLogFindListReq, opts ...grpc.CallOption) (*ScheduledTasksLogFindListResp, error) {
	out := new(ScheduledTasksLogFindListResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/ScheduledTasksFailureRecordLogFindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) AlarmLogFindList(ctx context.Context, in *AlarmLogFindListReq, opts ...grpc.CallOption) (*AlarmLogFindListResp, error) {
	out := new(AlarmLogFindListResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/AlarmLogFindList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveClient) AlarmUpState(ctx context.Context, in *AlarmUpStateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/archiveclient.Archive/AlarmUpState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServer is the server API for Archive service.
// All implementations must embed UnimplementedArchiveServer
// for forward compatibility
type ArchiveServer interface {
	// 用户日志
	AppLoggerAdd(context.Context, *AppLoggerAddReq) (*CommonResp, error)
	AppLoggerFindList(context.Context, *AppLoggerFindListReq) (*AppLoggerFindListResp, error)
	// 自定义任务日志
	ScheduledTasksLogFindList(context.Context, *ScheduledTasksLogFindListReq) (*ScheduledTasksLogFindListResp, error)
	// 重试任务日志
	ScheduledTasksFailureRecordLogFindList(context.Context, *ScheduledTasksLogFindListReq) (*ScheduledTasksLogFindListResp, error)
	// 告警日志
	AlarmLogFindList(context.Context, *AlarmLogFindListReq) (*AlarmLogFindListResp, error)
	// 告警更新状态
	AlarmUpState(context.Context, *AlarmUpStateReq) (*CommonResp, error)
	mustEmbedUnimplementedArchiveServer()
}

// UnimplementedArchiveServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveServer struct {
}

func (UnimplementedArchiveServer) AppLoggerAdd(context.Context, *AppLoggerAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppLoggerAdd not implemented")
}
func (UnimplementedArchiveServer) AppLoggerFindList(context.Context, *AppLoggerFindListReq) (*AppLoggerFindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppLoggerFindList not implemented")
}
func (UnimplementedArchiveServer) ScheduledTasksLogFindList(context.Context, *ScheduledTasksLogFindListReq) (*ScheduledTasksLogFindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduledTasksLogFindList not implemented")
}
func (UnimplementedArchiveServer) ScheduledTasksFailureRecordLogFindList(context.Context, *ScheduledTasksLogFindListReq) (*ScheduledTasksLogFindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduledTasksFailureRecordLogFindList not implemented")
}
func (UnimplementedArchiveServer) AlarmLogFindList(context.Context, *AlarmLogFindListReq) (*AlarmLogFindListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmLogFindList not implemented")
}
func (UnimplementedArchiveServer) AlarmUpState(context.Context, *AlarmUpStateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlarmUpState not implemented")
}
func (UnimplementedArchiveServer) mustEmbedUnimplementedArchiveServer() {}

// UnsafeArchiveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveServer will
// result in compilation errors.
type UnsafeArchiveServer interface {
	mustEmbedUnimplementedArchiveServer()
}

func RegisterArchiveServer(s grpc.ServiceRegistrar, srv ArchiveServer) {
	s.RegisterService(&Archive_ServiceDesc, srv)
}

func _Archive_AppLoggerAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLoggerAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).AppLoggerAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/AppLoggerAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).AppLoggerAdd(ctx, req.(*AppLoggerAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_AppLoggerFindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppLoggerFindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).AppLoggerFindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/AppLoggerFindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).AppLoggerFindList(ctx, req.(*AppLoggerFindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ScheduledTasksLogFindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledTasksLogFindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ScheduledTasksLogFindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/ScheduledTasksLogFindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ScheduledTasksLogFindList(ctx, req.(*ScheduledTasksLogFindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_ScheduledTasksFailureRecordLogFindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledTasksLogFindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).ScheduledTasksFailureRecordLogFindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/ScheduledTasksFailureRecordLogFindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).ScheduledTasksFailureRecordLogFindList(ctx, req.(*ScheduledTasksLogFindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_AlarmLogFindList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmLogFindListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).AlarmLogFindList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/AlarmLogFindList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).AlarmLogFindList(ctx, req.(*AlarmLogFindListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Archive_AlarmUpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlarmUpStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServer).AlarmUpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archiveclient.Archive/AlarmUpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServer).AlarmUpState(ctx, req.(*AlarmUpStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Archive_ServiceDesc is the grpc.ServiceDesc for Archive service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Archive_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archiveclient.Archive",
	HandlerType: (*ArchiveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppLoggerAdd",
			Handler:    _Archive_AppLoggerAdd_Handler,
		},
		{
			MethodName: "AppLoggerFindList",
			Handler:    _Archive_AppLoggerFindList_Handler,
		},
		{
			MethodName: "ScheduledTasksLogFindList",
			Handler:    _Archive_ScheduledTasksLogFindList_Handler,
		},
		{
			MethodName: "ScheduledTasksFailureRecordLogFindList",
			Handler:    _Archive_ScheduledTasksFailureRecordLogFindList_Handler,
		},
		{
			MethodName: "AlarmLogFindList",
			Handler:    _Archive_AlarmLogFindList_Handler,
		},
		{
			MethodName: "AlarmUpState",
			Handler:    _Archive_AlarmUpState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archive.proto",
}
