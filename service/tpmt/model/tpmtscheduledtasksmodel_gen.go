// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.2

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/Masterminds/squirrel"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tpmtScheduledTasksFieldNames          = builder.RawFieldNames(&TpmtScheduledTasks{})
	tpmtScheduledTasksRows                = strings.Join(tpmtScheduledTasksFieldNames, ",")
	tpmtScheduledTasksRowsExpectAutoSet   = strings.Join(stringx.Remove(tpmtScheduledTasksFieldNames, "`create_at`", "`create_time`", "`update_at`", "`update_time`"), ",")
	tpmtScheduledTasksRowsWithPlaceHolder = strings.Join(stringx.Remove(tpmtScheduledTasksFieldNames, "`id`", "`create_at`", "`create_time`", "`update_at`", "`update_time`"), "=?,") + "=?"

	cacheTpmtScheduledTasksIdPrefix = "cache:tpmtScheduledTasks:id:"
)

type (
	tpmtScheduledTasksModel interface {
		Insert(ctx context.Context, data *TpmtScheduledTasks) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*TpmtScheduledTasks, error)
		Update(ctx context.Context, data *TpmtScheduledTasks) error
		Delete(ctx context.Context, id string) error
		FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error)
		FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*TpmtScheduledTasks, error)
		RowBuilder() squirrel.SelectBuilder
		CountBuilder(field string) squirrel.SelectBuilder
		SumBuilder(field string) squirrel.SelectBuilder
		TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error
	}

	defaultTpmtScheduledTasksModel struct {
		sqlc.CachedConn
		table string
	}

	TpmtScheduledTasks struct {
		Id                  string         `db:"id"`                    // 定时任务ID
		CreatedAt           time.Time      `db:"created_at"`            // 创建时间
		UpdatedAt           sql.NullTime   `db:"updated_at"`            // 更新时间
		CreatedName         string         `db:"created_name"`          // 创建人
		UpdatedName         sql.NullString `db:"updated_name"`          // 更新人
		SchedulerName       string         `db:"scheduler_name"`        // 名称
		SchedulerCategory   int64          `db:"scheduler_category"`    // 类别 1:已接入任务, 2:自定义任务
		SchedulerTaskNumber int64          `db:"scheduler_task_number"` // 已接入任务号
		SchedulerType       int64          `db:"scheduler_type"`        // 类型 1:Http任务,2:Webservices任务
		IntervalTime        int64          `db:"interval_time"`         // 间隔时间按秒
		ErrorOrder          int64          `db:"error_order"`           // 失败重新发送次数1-10次 不可超过10次
		FailIntervalTime    int64          `db:"fail_interval_time"`    // 失败间隔时间按秒
		State               int64          `db:"state"`                 // 状态 1:启动  2:暂停
		SchedulerData       string         `db:"scheduler_data"`        // 内容
	}
)

func newTpmtScheduledTasksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTpmtScheduledTasksModel {
	return &defaultTpmtScheduledTasksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tpmt_scheduled_tasks`",
	}
}

func (m *defaultTpmtScheduledTasksModel) Delete(ctx context.Context, id string) error {
	tpmtScheduledTasksIdKey := fmt.Sprintf("%s%v", cacheTpmtScheduledTasksIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tpmtScheduledTasksIdKey)
	return err
}

func (m *defaultTpmtScheduledTasksModel) FindOne(ctx context.Context, id string) (*TpmtScheduledTasks, error) {
	tpmtScheduledTasksIdKey := fmt.Sprintf("%s%v", cacheTpmtScheduledTasksIdPrefix, id)
	var resp TpmtScheduledTasks
	err := m.QueryRowCtx(ctx, &resp, tpmtScheduledTasksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tpmtScheduledTasksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, sqlx.ErrNotFound
	default:
		return nil, err
	}

}

func (m *defaultTpmtScheduledTasksModel) Insert(ctx context.Context, data *TpmtScheduledTasks) (sql.Result, error) {
	tpmtScheduledTasksIdKey := fmt.Sprintf("%s%v", cacheTpmtScheduledTasksIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tpmtScheduledTasksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.CreatedAt, data.UpdatedAt, data.CreatedName, data.UpdatedName, data.SchedulerName, data.SchedulerCategory, data.SchedulerTaskNumber, data.SchedulerType, data.IntervalTime, data.ErrorOrder, data.FailIntervalTime, data.State, data.SchedulerData)
	}, tpmtScheduledTasksIdKey)
	return ret, err
}

func (m *defaultTpmtScheduledTasksModel) Update(ctx context.Context, data *TpmtScheduledTasks) error {
	tpmtScheduledTasksIdKey := fmt.Sprintf("%s%v", cacheTpmtScheduledTasksIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tpmtScheduledTasksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.CreatedAt, data.UpdatedAt, data.CreatedName, data.UpdatedName, data.SchedulerName, data.SchedulerCategory, data.SchedulerTaskNumber, data.SchedulerType, data.IntervalTime, data.ErrorOrder, data.FailIntervalTime, data.State, data.SchedulerData, data.Id)
	}, tpmtScheduledTasksIdKey)
	return err
}

func (m *defaultTpmtScheduledTasksModel) RowBuilder() squirrel.SelectBuilder {
	return squirrel.Select(tpmtScheduledTasksRows).From(m.table)
}

func (m *defaultTpmtScheduledTasksModel) CountBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("COUNT(" + field + ")").From(m.table)
}

func (m *defaultTpmtScheduledTasksModel) SumBuilder(field string) squirrel.SelectBuilder {
	return squirrel.Select("IFNULL(SUM(" + field + "),0)").From(m.table)
}

func (m *defaultTpmtScheduledTasksModel) FindCount(ctx context.Context, countBuilder squirrel.SelectBuilder) (int64, error) {

	query, values, err := countBuilder.ToSql()
	if err != nil {
		return 0, err
	}

	var resp int64
	err = m.QueryRowNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return 0, nil
	default:
		return 0, err
	}
}

func (m *defaultTpmtScheduledTasksModel) FindList(ctx context.Context, rowBuilder squirrel.SelectBuilder, current, pageSize int64) ([]*TpmtScheduledTasks, error) {

	if current < 1 {
		current = 1
	}
	offset := (current - 1) * pageSize

	query, values, err := rowBuilder.Offset(uint64(offset)).Limit(uint64(pageSize)).ToSql()
	if err != nil {
		return nil, err
	}

	var resp []*TpmtScheduledTasks
	err = m.QueryRowsNoCacheCtx(ctx, &resp, query, values...)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, nil
	default:
		return nil, err
	}
}

func (m *defaultTpmtScheduledTasksModel) TransCtx(ctx context.Context, fn func(ctx context.Context, sqlx sqlx.Session) error) error {
	return m.Transact(func(s sqlx.Session) error {
		return fn(ctx, s)
	})
}

func (m *defaultTpmtScheduledTasksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTpmtScheduledTasksIdPrefix, primary)
}

func (m *defaultTpmtScheduledTasksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tpmtScheduledTasksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTpmtScheduledTasksModel) tableName() string {
	return m.table
}
