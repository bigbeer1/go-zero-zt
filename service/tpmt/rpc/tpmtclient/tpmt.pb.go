// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: tpmt.proto

package tpmtclient

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{0}
}

// 告警内容
type AlarmRuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level    int64  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`                       // 告警等级
	RuleType int64  `protobuf:"varint,2,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"` // 1越上限,2越下限,3相同
	RuleData string `protobuf:"bytes,3,opt,name=rule_data,json=ruleData,proto3" json:"rule_data,omitempty"`  // 数值带单位
}

func (x *AlarmRuleInfo) Reset() {
	*x = AlarmRuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmRuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmRuleInfo) ProtoMessage() {}

func (x *AlarmRuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmRuleInfo.ProtoReflect.Descriptor instead.
func (*AlarmRuleInfo) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{1}
}

func (x *AlarmRuleInfo) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AlarmRuleInfo) GetRuleType() int64 {
	if x != nil {
		return x.RuleType
	}
	return 0
}

func (x *AlarmRuleInfo) GetRuleData() string {
	if x != nil {
		return x.RuleData
	}
	return ""
}

// TpmtAsset 添加
type TpmtAssetAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetType    int64  `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`         // 资产类型
	AssetCode    string `protobuf:"bytes,2,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`          // 资产编号
	AssetName    string `protobuf:"bytes,3,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`          // 资产名称
	AssetModel   string `protobuf:"bytes,4,opt,name=asset_model,json=assetModel,proto3" json:"asset_model,omitempty"`       // 资产型号
	ManuFacturer string `protobuf:"bytes,5,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Voltage      string `protobuf:"bytes,6,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // 电压
	Capacity     string `protobuf:"bytes,7,opt,name=capacity,proto3" json:"capacity,omitempty"`                             // 容量
	CreatedName  string `protobuf:"bytes,8,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`    // 创建人
}

func (x *TpmtAssetAddReq) Reset() {
	*x = TpmtAssetAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetAddReq) ProtoMessage() {}

func (x *TpmtAssetAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetAddReq.ProtoReflect.Descriptor instead.
func (*TpmtAssetAddReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{2}
}

func (x *TpmtAssetAddReq) GetAssetType() int64 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *TpmtAssetAddReq) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *TpmtAssetAddReq) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtAssetAddReq) GetAssetModel() string {
	if x != nil {
		return x.AssetModel
	}
	return ""
}

func (x *TpmtAssetAddReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtAssetAddReq) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *TpmtAssetAddReq) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *TpmtAssetAddReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

// TpmtAsset 删除
type TpmtAssetDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 资产ID
}

func (x *TpmtAssetDeleteReq) Reset() {
	*x = TpmtAssetDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetDeleteReq) ProtoMessage() {}

func (x *TpmtAssetDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetDeleteReq.ProtoReflect.Descriptor instead.
func (*TpmtAssetDeleteReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{3}
}

func (x *TpmtAssetDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TpmtAsset 更新
type TpmtAssetUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 资产ID
	AssetType    int64  `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`         // 资产类型
	AssetCode    string `protobuf:"bytes,3,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`          // 资产编号
	AssetName    string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`          // 资产名称
	AssetModel   string `protobuf:"bytes,5,opt,name=asset_model,json=assetModel,proto3" json:"asset_model,omitempty"`       // 资产型号
	ManuFacturer string `protobuf:"bytes,6,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Voltage      string `protobuf:"bytes,7,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // 电压
	Capacity     string `protobuf:"bytes,8,opt,name=capacity,proto3" json:"capacity,omitempty"`                             // 容量
	UpdatedName  string `protobuf:"bytes,9,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`    // 更新人
}

func (x *TpmtAssetUpdateReq) Reset() {
	*x = TpmtAssetUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetUpdateReq) ProtoMessage() {}

func (x *TpmtAssetUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetUpdateReq.ProtoReflect.Descriptor instead.
func (*TpmtAssetUpdateReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{4}
}

func (x *TpmtAssetUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetAssetType() int64 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *TpmtAssetUpdateReq) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetAssetModel() string {
	if x != nil {
		return x.AssetModel
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *TpmtAssetUpdateReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// TpmtAsset 单个查询
type TpmtAssetFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 资产ID
}

func (x *TpmtAssetFindOneReq) Reset() {
	*x = TpmtAssetFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetFindOneReq) ProtoMessage() {}

func (x *TpmtAssetFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetFindOneReq.ProtoReflect.Descriptor instead.
func (*TpmtAssetFindOneReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{5}
}

func (x *TpmtAssetFindOneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TpmtAsset 单个查询返回
type TpmtAssetFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 资产ID
	AssetType    int64  `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`         // 资产类型
	AssetCode    string `protobuf:"bytes,3,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`          // 资产编号
	AssetName    string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`          // 资产名称
	AssetModel   string `protobuf:"bytes,5,opt,name=asset_model,json=assetModel,proto3" json:"asset_model,omitempty"`       // 资产型号
	ManuFacturer string `protobuf:"bytes,6,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Voltage      string `protobuf:"bytes,7,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // 电压
	Capacity     string `protobuf:"bytes,8,opt,name=capacity,proto3" json:"capacity,omitempty"`                             // 容量
	CreatedAt    int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // 创建时间
	CreatedName  string `protobuf:"bytes,10,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`   // 创建人
	UpdatedAt    int64  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`        // 更新时间
	UpdatedName  string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`   // 更新人
}

func (x *TpmtAssetFindOneResp) Reset() {
	*x = TpmtAssetFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetFindOneResp) ProtoMessage() {}

func (x *TpmtAssetFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetFindOneResp.ProtoReflect.Descriptor instead.
func (*TpmtAssetFindOneResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{6}
}

func (x *TpmtAssetFindOneResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetAssetType() int64 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *TpmtAssetFindOneResp) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetAssetModel() string {
	if x != nil {
		return x.AssetModel
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtAssetFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtAssetFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtAssetFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// TpmtAsset 分页查询
type TpmtAssetListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current      int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                              // 页码
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 页数
	AssetType    int64  `protobuf:"varint,3,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`         // 资产类型
	AssetCode    string `protobuf:"bytes,4,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`          // 资产编号
	AssetName    string `protobuf:"bytes,5,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`          // 资产名称
	AssetModel   string `protobuf:"bytes,6,opt,name=asset_model,json=assetModel,proto3" json:"asset_model,omitempty"`       // 资产型号
	ManuFacturer string `protobuf:"bytes,7,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Voltage      string `protobuf:"bytes,8,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // 电压
	Capacity     string `protobuf:"bytes,9,opt,name=capacity,proto3" json:"capacity,omitempty"`                             // 容量
}

func (x *TpmtAssetListReq) Reset() {
	*x = TpmtAssetListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetListReq) ProtoMessage() {}

func (x *TpmtAssetListReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetListReq.ProtoReflect.Descriptor instead.
func (*TpmtAssetListReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{7}
}

func (x *TpmtAssetListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TpmtAssetListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TpmtAssetListReq) GetAssetType() int64 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *TpmtAssetListReq) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *TpmtAssetListReq) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtAssetListReq) GetAssetModel() string {
	if x != nil {
		return x.AssetModel
	}
	return ""
}

func (x *TpmtAssetListReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtAssetListReq) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *TpmtAssetListReq) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

// TpmtAsset 分页查询返回
type TpmtAssetListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*TpmtAssetListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TpmtAssetListResp) Reset() {
	*x = TpmtAssetListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetListResp) ProtoMessage() {}

func (x *TpmtAssetListResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetListResp.ProtoReflect.Descriptor instead.
func (*TpmtAssetListResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{8}
}

func (x *TpmtAssetListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TpmtAssetListResp) GetList() []*TpmtAssetListData {
	if x != nil {
		return x.List
	}
	return nil
}

// TpmtAsset 列表信息
type TpmtAssetListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 资产ID
	AssetType    int64  `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3" json:"asset_type,omitempty"`         // 资产类型
	AssetCode    string `protobuf:"bytes,3,opt,name=asset_code,json=assetCode,proto3" json:"asset_code,omitempty"`          // 资产编号
	AssetName    string `protobuf:"bytes,4,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`          // 资产名称
	AssetModel   string `protobuf:"bytes,5,opt,name=asset_model,json=assetModel,proto3" json:"asset_model,omitempty"`       // 资产型号
	ManuFacturer string `protobuf:"bytes,6,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Voltage      string `protobuf:"bytes,7,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // 电压
	Capacity     string `protobuf:"bytes,8,opt,name=capacity,proto3" json:"capacity,omitempty"`                             // 容量
	CreatedAt    int64  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // 创建时间
	CreatedName  string `protobuf:"bytes,10,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`   // 创建人
	UpdatedAt    int64  `protobuf:"varint,11,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`        // 更新时间
	UpdatedName  string `protobuf:"bytes,12,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`   // 更新人
}

func (x *TpmtAssetListData) Reset() {
	*x = TpmtAssetListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtAssetListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtAssetListData) ProtoMessage() {}

func (x *TpmtAssetListData) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtAssetListData.ProtoReflect.Descriptor instead.
func (*TpmtAssetListData) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{9}
}

func (x *TpmtAssetListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtAssetListData) GetAssetType() int64 {
	if x != nil {
		return x.AssetType
	}
	return 0
}

func (x *TpmtAssetListData) GetAssetCode() string {
	if x != nil {
		return x.AssetCode
	}
	return ""
}

func (x *TpmtAssetListData) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtAssetListData) GetAssetModel() string {
	if x != nil {
		return x.AssetModel
	}
	return ""
}

func (x *TpmtAssetListData) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtAssetListData) GetVoltage() string {
	if x != nil {
		return x.Voltage
	}
	return ""
}

func (x *TpmtAssetListData) GetCapacity() string {
	if x != nil {
		return x.Capacity
	}
	return ""
}

func (x *TpmtAssetListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtAssetListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtAssetListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtAssetListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

// TpmtGateway 添加
type TpmtGatewayAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedName  string `protobuf:"bytes,1,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`    // 创建人
	GatewayName  string `protobuf:"bytes,2,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`    // 网关名称
	GatewayModel string `protobuf:"bytes,3,opt,name=gateway_model,json=gatewayModel,proto3" json:"gateway_model,omitempty"` // 网关型号
	ManuFacturer string `protobuf:"bytes,4,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Agreement    int64  `protobuf:"varint,5,opt,name=agreement,proto3" json:"agreement,omitempty"`                          // 协议 默认1:modbus
	BaudRate     int64  `protobuf:"varint,6,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`            // 波特率
	Parity       string `protobuf:"bytes,7,opt,name=parity,proto3" json:"parity,omitempty"`                                 // 校验
	DataBits     int64  `protobuf:"varint,8,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`            // 数据位
	StopBits     int64  `protobuf:"varint,9,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`            // 停止位
	ComPort      string `protobuf:"bytes,10,opt,name=com_port,json=comPort,proto3" json:"com_port,omitempty"`               // com端口
	AddressCode  int64  `protobuf:"varint,11,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`  // 地址码
}

func (x *TpmtGatewayAddReq) Reset() {
	*x = TpmtGatewayAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayAddReq) ProtoMessage() {}

func (x *TpmtGatewayAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayAddReq.ProtoReflect.Descriptor instead.
func (*TpmtGatewayAddReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{10}
}

func (x *TpmtGatewayAddReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetGatewayModel() string {
	if x != nil {
		return x.GatewayModel
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetAgreement() int64 {
	if x != nil {
		return x.Agreement
	}
	return 0
}

func (x *TpmtGatewayAddReq) GetBaudRate() int64 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *TpmtGatewayAddReq) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtGatewayAddReq) GetStopBits() int64 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *TpmtGatewayAddReq) GetComPort() string {
	if x != nil {
		return x.ComPort
	}
	return ""
}

func (x *TpmtGatewayAddReq) GetAddressCode() int64 {
	if x != nil {
		return x.AddressCode
	}
	return 0
}

// TpmtGateway 删除
type TpmtGatewayDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 采集器ID/网关
}

func (x *TpmtGatewayDeleteReq) Reset() {
	*x = TpmtGatewayDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayDeleteReq) ProtoMessage() {}

func (x *TpmtGatewayDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayDeleteReq.ProtoReflect.Descriptor instead.
func (*TpmtGatewayDeleteReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{11}
}

func (x *TpmtGatewayDeleteReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TpmtGateway 更新
type TpmtGatewayUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 采集器ID/网关
	UpdatedName  string `protobuf:"bytes,2,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`    // 更新人
	GatewayName  string `protobuf:"bytes,3,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`    // 网关名称
	GatewayModel string `protobuf:"bytes,4,opt,name=gateway_model,json=gatewayModel,proto3" json:"gateway_model,omitempty"` // 网关型号
	ManuFacturer string `protobuf:"bytes,5,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Agreement    int64  `protobuf:"varint,6,opt,name=agreement,proto3" json:"agreement,omitempty"`                          // 协议 默认1:modbus
	BaudRate     int64  `protobuf:"varint,7,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`            // 波特率
	Parity       string `protobuf:"bytes,8,opt,name=parity,proto3" json:"parity,omitempty"`                                 // 校验
	DataBits     int64  `protobuf:"varint,9,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`            // 数据位
	StopBits     int64  `protobuf:"varint,10,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`           // 停止位
	ComPort      string `protobuf:"bytes,11,opt,name=com_port,json=comPort,proto3" json:"com_port,omitempty"`               // com端口
	AddressCode  int64  `protobuf:"varint,12,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`  // 地址码
}

func (x *TpmtGatewayUpdateReq) Reset() {
	*x = TpmtGatewayUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayUpdateReq) ProtoMessage() {}

func (x *TpmtGatewayUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayUpdateReq.ProtoReflect.Descriptor instead.
func (*TpmtGatewayUpdateReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{12}
}

func (x *TpmtGatewayUpdateReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetGatewayModel() string {
	if x != nil {
		return x.GatewayModel
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetAgreement() int64 {
	if x != nil {
		return x.Agreement
	}
	return 0
}

func (x *TpmtGatewayUpdateReq) GetBaudRate() int64 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *TpmtGatewayUpdateReq) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtGatewayUpdateReq) GetStopBits() int64 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *TpmtGatewayUpdateReq) GetComPort() string {
	if x != nil {
		return x.ComPort
	}
	return ""
}

func (x *TpmtGatewayUpdateReq) GetAddressCode() int64 {
	if x != nil {
		return x.AddressCode
	}
	return 0
}

// TpmtGateway 单个查询
type TpmtGatewayFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 采集器ID/网关
}

func (x *TpmtGatewayFindOneReq) Reset() {
	*x = TpmtGatewayFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayFindOneReq) ProtoMessage() {}

func (x *TpmtGatewayFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayFindOneReq.ProtoReflect.Descriptor instead.
func (*TpmtGatewayFindOneReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{13}
}

func (x *TpmtGatewayFindOneReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// TpmtGateway 单个查询返回
type TpmtGatewayFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 采集器ID/网关
	CreatedAt    int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // 创建时间
	UpdatedAt    int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`         // 更新时间
	CreatedName  string `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`    // 创建人
	UpdatedName  string `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`    // 更新人
	GatewayName  string `protobuf:"bytes,6,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`    // 网关名称
	GatewayModel string `protobuf:"bytes,7,opt,name=gateway_model,json=gatewayModel,proto3" json:"gateway_model,omitempty"` // 网关型号
	ManuFacturer string `protobuf:"bytes,8,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Agreement    int64  `protobuf:"varint,9,opt,name=agreement,proto3" json:"agreement,omitempty"`                          // 协议 默认1:modbus
	BaudRate     int64  `protobuf:"varint,10,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`           // 波特率
	Parity       string `protobuf:"bytes,11,opt,name=parity,proto3" json:"parity,omitempty"`                                // 校验
	DataBits     int64  `protobuf:"varint,12,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`           // 数据位
	StopBits     int64  `protobuf:"varint,13,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`           // 停止位
	ComPort      string `protobuf:"bytes,14,opt,name=com_port,json=comPort,proto3" json:"com_port,omitempty"`               // com端口
	AddressCode  int64  `protobuf:"varint,15,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`  // 地址码
}

func (x *TpmtGatewayFindOneResp) Reset() {
	*x = TpmtGatewayFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayFindOneResp) ProtoMessage() {}

func (x *TpmtGatewayFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayFindOneResp.ProtoReflect.Descriptor instead.
func (*TpmtGatewayFindOneResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{14}
}

func (x *TpmtGatewayFindOneResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetGatewayModel() string {
	if x != nil {
		return x.GatewayModel
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetAgreement() int64 {
	if x != nil {
		return x.Agreement
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetBaudRate() int64 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetStopBits() int64 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *TpmtGatewayFindOneResp) GetComPort() string {
	if x != nil {
		return x.ComPort
	}
	return ""
}

func (x *TpmtGatewayFindOneResp) GetAddressCode() int64 {
	if x != nil {
		return x.AddressCode
	}
	return 0
}

// TpmtGateway 分页查询
type TpmtGatewayListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current      int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                              // 页码
	PageSize     int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`            // 页数
	GatewayName  string `protobuf:"bytes,3,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`    // 网关名称
	GatewayModel string `protobuf:"bytes,4,opt,name=gateway_model,json=gatewayModel,proto3" json:"gateway_model,omitempty"` // 网关型号
	ManuFacturer string `protobuf:"bytes,5,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Agreement    int64  `protobuf:"varint,6,opt,name=agreement,proto3" json:"agreement,omitempty"`                          // 协议 默认1:modbus
	BaudRate     int64  `protobuf:"varint,7,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`            // 波特率
	Parity       string `protobuf:"bytes,8,opt,name=parity,proto3" json:"parity,omitempty"`                                 // 校验
	DataBits     int64  `protobuf:"varint,9,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`            // 数据位
	StopBits     int64  `protobuf:"varint,10,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`           // 停止位
	ComPort      string `protobuf:"bytes,11,opt,name=com_port,json=comPort,proto3" json:"com_port,omitempty"`               // com端口
	AddressCode  int64  `protobuf:"varint,12,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`  // 地址码
}

func (x *TpmtGatewayListReq) Reset() {
	*x = TpmtGatewayListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayListReq) ProtoMessage() {}

func (x *TpmtGatewayListReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayListReq.ProtoReflect.Descriptor instead.
func (*TpmtGatewayListReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{15}
}

func (x *TpmtGatewayListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TpmtGatewayListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TpmtGatewayListReq) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *TpmtGatewayListReq) GetGatewayModel() string {
	if x != nil {
		return x.GatewayModel
	}
	return ""
}

func (x *TpmtGatewayListReq) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtGatewayListReq) GetAgreement() int64 {
	if x != nil {
		return x.Agreement
	}
	return 0
}

func (x *TpmtGatewayListReq) GetBaudRate() int64 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *TpmtGatewayListReq) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TpmtGatewayListReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtGatewayListReq) GetStopBits() int64 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *TpmtGatewayListReq) GetComPort() string {
	if x != nil {
		return x.ComPort
	}
	return ""
}

func (x *TpmtGatewayListReq) GetAddressCode() int64 {
	if x != nil {
		return x.AddressCode
	}
	return 0
}

// TpmtGateway 分页查询返回
type TpmtGatewayListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*TpmtGatewayListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TpmtGatewayListResp) Reset() {
	*x = TpmtGatewayListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayListResp) ProtoMessage() {}

func (x *TpmtGatewayListResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayListResp.ProtoReflect.Descriptor instead.
func (*TpmtGatewayListResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{16}
}

func (x *TpmtGatewayListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TpmtGatewayListResp) GetList() []*TpmtGatewayListData {
	if x != nil {
		return x.List
	}
	return nil
}

// TpmtGateway 列表信息
type TpmtGatewayListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                         // 采集器ID/网关
	CreatedAt    int64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`         // 创建时间
	UpdatedAt    int64  `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`         // 更新时间
	CreatedName  string `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`    // 创建人
	UpdatedName  string `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`    // 更新人
	GatewayName  string `protobuf:"bytes,6,opt,name=gateway_name,json=gatewayName,proto3" json:"gateway_name,omitempty"`    // 网关名称
	GatewayModel string `protobuf:"bytes,7,opt,name=gateway_model,json=gatewayModel,proto3" json:"gateway_model,omitempty"` // 网关型号
	ManuFacturer string `protobuf:"bytes,8,opt,name=manu_facturer,json=manuFacturer,proto3" json:"manu_facturer,omitempty"` // 生产厂家
	Agreement    int64  `protobuf:"varint,9,opt,name=agreement,proto3" json:"agreement,omitempty"`                          // 协议 默认1:modbus
	BaudRate     int64  `protobuf:"varint,10,opt,name=baud_rate,json=baudRate,proto3" json:"baud_rate,omitempty"`           // 波特率
	Parity       string `protobuf:"bytes,11,opt,name=parity,proto3" json:"parity,omitempty"`                                // 校验
	DataBits     int64  `protobuf:"varint,12,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`           // 数据位
	StopBits     int64  `protobuf:"varint,13,opt,name=stop_bits,json=stopBits,proto3" json:"stop_bits,omitempty"`           // 停止位
	ComPort      string `protobuf:"bytes,14,opt,name=com_port,json=comPort,proto3" json:"com_port,omitempty"`               // com端口
	AddressCode  int64  `protobuf:"varint,15,opt,name=address_code,json=addressCode,proto3" json:"address_code,omitempty"`  // 地址码
}

func (x *TpmtGatewayListData) Reset() {
	*x = TpmtGatewayListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtGatewayListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtGatewayListData) ProtoMessage() {}

func (x *TpmtGatewayListData) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtGatewayListData.ProtoReflect.Descriptor instead.
func (*TpmtGatewayListData) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{17}
}

func (x *TpmtGatewayListData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TpmtGatewayListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtGatewayListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtGatewayListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtGatewayListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtGatewayListData) GetGatewayName() string {
	if x != nil {
		return x.GatewayName
	}
	return ""
}

func (x *TpmtGatewayListData) GetGatewayModel() string {
	if x != nil {
		return x.GatewayModel
	}
	return ""
}

func (x *TpmtGatewayListData) GetManuFacturer() string {
	if x != nil {
		return x.ManuFacturer
	}
	return ""
}

func (x *TpmtGatewayListData) GetAgreement() int64 {
	if x != nil {
		return x.Agreement
	}
	return 0
}

func (x *TpmtGatewayListData) GetBaudRate() int64 {
	if x != nil {
		return x.BaudRate
	}
	return 0
}

func (x *TpmtGatewayListData) GetParity() string {
	if x != nil {
		return x.Parity
	}
	return ""
}

func (x *TpmtGatewayListData) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtGatewayListData) GetStopBits() int64 {
	if x != nil {
		return x.StopBits
	}
	return 0
}

func (x *TpmtGatewayListData) GetComPort() string {
	if x != nil {
		return x.ComPort
	}
	return ""
}

func (x *TpmtGatewayListData) GetAddressCode() int64 {
	if x != nil {
		return x.AddressCode
	}
	return 0
}

// TpmtMonitorPoint 添加
type TpmtMonitorPointAddReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedName               string  `protobuf:"bytes,1,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	SerialNumber              string  `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string  `protobuf:"bytes,4,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64   `protobuf:"varint,5,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令  1: 01  2: 02  3:03  4:04
	PointAnalysisRule         int64   `protobuf:"varint,6,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                         // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64   `protobuf:"varint,7,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                   // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64   `protobuf:"varint,8,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                       // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64   `protobuf:"varint,9,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                                // 分组
	CircuitType               int64   `protobuf:"varint,10,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string  `protobuf:"bytes,11,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64   `protobuf:"varint,12,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64 `protobuf:"fixed64,13,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64   `protobuf:"varint,14,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string  `protobuf:"bytes,15,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64   `protobuf:"varint,16,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64 `protobuf:"fixed64,17,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64 `protobuf:"fixed64,18,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64 `protobuf:"fixed64,19,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64 `protobuf:"fixed64,20,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64   `protobuf:"varint,21,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string  `protobuf:"bytes,22,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string  `protobuf:"bytes,23,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
	Sort                      int64   `protobuf:"varint,24,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
}

func (x *TpmtMonitorPointAddReq) Reset() {
	*x = TpmtMonitorPointAddReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointAddReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointAddReq) ProtoMessage() {}

func (x *TpmtMonitorPointAddReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointAddReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointAddReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{18}
}

func (x *TpmtMonitorPointAddReq) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointAddReq) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointAddReq) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// TpmtMonitorPoint 删除
type TpmtMonitorPointDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 监测点ID
}

func (x *TpmtMonitorPointDeleteReq) Reset() {
	*x = TpmtMonitorPointDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointDeleteReq) ProtoMessage() {}

func (x *TpmtMonitorPointDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointDeleteReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointDeleteReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{19}
}

func (x *TpmtMonitorPointDeleteReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// TpmtMonitorPoint 更新
type TpmtMonitorPointUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	UpdatedName               string  `protobuf:"bytes,2,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string  `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string  `protobuf:"bytes,5,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64   `protobuf:"varint,6,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令  1: 01  2: 02  3:03  4:04
	PointAnalysisRule         int64   `protobuf:"varint,7,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                         // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64   `protobuf:"varint,8,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                   // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64   `protobuf:"varint,9,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                       // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64   `protobuf:"varint,10,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64   `protobuf:"varint,11,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string  `protobuf:"bytes,12,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64   `protobuf:"varint,13,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64 `protobuf:"fixed64,14,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64   `protobuf:"varint,15,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string  `protobuf:"bytes,16,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64   `protobuf:"varint,17,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64 `protobuf:"fixed64,18,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64 `protobuf:"fixed64,19,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64 `protobuf:"fixed64,20,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64 `protobuf:"fixed64,21,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64   `protobuf:"varint,22,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	AssetId                   string  `protobuf:"bytes,24,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
	Sort                      int64   `protobuf:"varint,25,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
}

func (x *TpmtMonitorPointUpdateReq) Reset() {
	*x = TpmtMonitorPointUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointUpdateReq) ProtoMessage() {}

func (x *TpmtMonitorPointUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointUpdateReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointUpdateReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{20}
}

func (x *TpmtMonitorPointUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointUpdateReq) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointUpdateReq) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// TpmtMonitorPoint 单个查询
type TpmtMonitorPointFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 监测点ID
}

func (x *TpmtMonitorPointFindOneReq) Reset() {
	*x = TpmtMonitorPointFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointFindOneReq) ProtoMessage() {}

func (x *TpmtMonitorPointFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointFindOneReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointFindOneReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{21}
}

func (x *TpmtMonitorPointFindOneReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// TpmtMonitorPoint 单个查询返回
type TpmtMonitorPointFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	CreatedAt                 int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 创建时间
	UpdatedAt                 int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 更新时间
	CreatedName               string  `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	UpdatedName               string  `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string  `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string  `protobuf:"bytes,8,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64   `protobuf:"varint,9,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令  1: 01  2: 02  3:03  4:04
	PointAnalysisRule         int64   `protobuf:"varint,10,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                        // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64   `protobuf:"varint,11,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                  // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64   `protobuf:"varint,12,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                      // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64   `protobuf:"varint,13,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64   `protobuf:"varint,14,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string  `protobuf:"bytes,15,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64   `protobuf:"varint,16,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64 `protobuf:"fixed64,17,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64   `protobuf:"varint,18,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string  `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64   `protobuf:"varint,20,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64 `protobuf:"fixed64,21,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64 `protobuf:"fixed64,22,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64 `protobuf:"fixed64,23,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64 `protobuf:"fixed64,24,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64   `protobuf:"varint,25,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string  `protobuf:"bytes,26,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string  `protobuf:"bytes,27,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
	Sort                      int64   `protobuf:"varint,28,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
}

func (x *TpmtMonitorPointFindOneResp) Reset() {
	*x = TpmtMonitorPointFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointFindOneResp) ProtoMessage() {}

func (x *TpmtMonitorPointFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointFindOneResp.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointFindOneResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{22}
}

func (x *TpmtMonitorPointFindOneResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointFindOneResp) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointFindOneResp) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

// TpmtMonitorPoint 分页查询
type TpmtMonitorPointListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current                   int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                                                        // 页码
	PageSize                  int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                                                      // 页数
	SerialNumber              string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string `protobuf:"bytes,5,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64  `protobuf:"varint,6,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令  1: 01  2: 02  3:03  4:04
	PointAnalysisRule         int64  `protobuf:"varint,7,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                         // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64  `protobuf:"varint,8,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                   // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64  `protobuf:"varint,9,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                       // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64  `protobuf:"varint,10,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64  `protobuf:"varint,11,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	DataBits                  int64  `protobuf:"varint,13,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	IsDisplacementWarning     int64  `protobuf:"varint,22,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string `protobuf:"bytes,23,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string `protobuf:"bytes,24,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
}

func (x *TpmtMonitorPointListReq) Reset() {
	*x = TpmtMonitorPointListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointListReq) ProtoMessage() {}

func (x *TpmtMonitorPointListReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointListReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointListReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{23}
}

func (x *TpmtMonitorPointListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointListReq) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointListReq) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointListReq) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointListReq) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// TpmtMonitorPoint 分页查询返回
type TpmtMonitorPointListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*TpmtMonitorPointListData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TpmtMonitorPointListResp) Reset() {
	*x = TpmtMonitorPointListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointListResp) ProtoMessage() {}

func (x *TpmtMonitorPointListResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointListResp.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointListResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{24}
}

func (x *TpmtMonitorPointListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TpmtMonitorPointListResp) GetList() []*TpmtMonitorPointListData {
	if x != nil {
		return x.List
	}
	return nil
}

// TpmtMonitorPoint 列表信息
type TpmtMonitorPointListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	CreatedAt                 int64   `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 创建时间
	UpdatedAt                 int64   `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 更新时间
	CreatedName               string  `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	UpdatedName               string  `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string  `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string  `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string  `protobuf:"bytes,8,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64   `protobuf:"varint,9,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令  1: 01  2: 02  3:03  4:04
	PointAnalysisRule         int64   `protobuf:"varint,10,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                        // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64   `protobuf:"varint,11,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                  // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64   `protobuf:"varint,12,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                      // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64   `protobuf:"varint,13,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64   `protobuf:"varint,14,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string  `protobuf:"bytes,15,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64   `protobuf:"varint,16,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64 `protobuf:"fixed64,17,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64   `protobuf:"varint,18,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string  `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64   `protobuf:"varint,20,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64 `protobuf:"fixed64,21,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64 `protobuf:"fixed64,22,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64 `protobuf:"fixed64,23,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64 `protobuf:"fixed64,24,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64   `protobuf:"varint,25,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string  `protobuf:"bytes,26,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string  `protobuf:"bytes,27,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
	Sort                      int64   `protobuf:"varint,28,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
}

func (x *TpmtMonitorPointListData) Reset() {
	*x = TpmtMonitorPointListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointListData) ProtoMessage() {}

func (x *TpmtMonitorPointListData) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointListData.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointListData) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{25}
}

func (x *TpmtMonitorPointListData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointListData) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointListData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type TpmtMonitorPointRealTimeListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current       int64  `protobuf:"varint,1,opt,name=current,proto3" json:"current,omitempty"`                                    // 页码
	PageSize      int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 页数
	SerialNumber  string `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`       // 编号
	Name          string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                           // 监测点名称
	PointType     int64  `protobuf:"varint,9,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`               // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory int64  `protobuf:"varint,10,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`  // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup    int64  `protobuf:"varint,12,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`           // 分组
	CircuitType   int64  `protobuf:"varint,13,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`        // 回路类型
	TpmtGatewayId string `protobuf:"bytes,22,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"` // 网关ID
	AssetId       string `protobuf:"bytes,23,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                     // 资产ID
}

func (x *TpmtMonitorPointRealTimeListReq) Reset() {
	*x = TpmtMonitorPointRealTimeListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointRealTimeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointRealTimeListReq) ProtoMessage() {}

func (x *TpmtMonitorPointRealTimeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointRealTimeListReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointRealTimeListReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{26}
}

func (x *TpmtMonitorPointRealTimeListReq) GetCurrent() int64 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeListReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeListReq) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListReq) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeListReq) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

// TpmtMonitorPointRealTimeList 分页查询返回
type TpmtMonitorPointRealTimeListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64                           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` // 总数
	List  []*TpmtMonitorPointRealTimeData `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`    // 内容
}

func (x *TpmtMonitorPointRealTimeListResp) Reset() {
	*x = TpmtMonitorPointRealTimeListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointRealTimeListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointRealTimeListResp) ProtoMessage() {}

func (x *TpmtMonitorPointRealTimeListResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointRealTimeListResp.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointRealTimeListResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{27}
}

func (x *TpmtMonitorPointRealTimeListResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeListResp) GetList() []*TpmtMonitorPointRealTimeData {
	if x != nil {
		return x.List
	}
	return nil
}

// TpmtMonitorPointRealTimeList 列表信息
type TpmtMonitorPointRealTimeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	CreatedAt                 int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 创建时间
	UpdatedAt                 int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 更新时间
	CreatedName               string                `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	UpdatedName               string                `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string                `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string                `protobuf:"bytes,8,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64                 `protobuf:"varint,9,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令 1: 02  2:03  3:04
	PointAnalysisRule         int64                 `protobuf:"varint,10,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                        // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64                 `protobuf:"varint,11,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                  // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64                 `protobuf:"varint,12,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                      // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64                 `protobuf:"varint,13,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64                 `protobuf:"varint,14,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string                `protobuf:"bytes,15,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64                 `protobuf:"varint,16,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64               `protobuf:"fixed64,17,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64                 `protobuf:"varint,18,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string                `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64                 `protobuf:"varint,20,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64               `protobuf:"fixed64,21,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64               `protobuf:"fixed64,22,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64               `protobuf:"fixed64,23,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64               `protobuf:"fixed64,24,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64                 `protobuf:"varint,25,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string                `protobuf:"bytes,26,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string                `protobuf:"bytes,27,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产ID
	Sort                      int64                 `protobuf:"varint,28,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
	ResultValue               string                `protobuf:"bytes,32,opt,name=result_value,json=resultValue,proto3" json:"result_value,omitempty"`                                             // 监测值
	UpdateTime                int64                 `protobuf:"varint,33,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                               // 值更新时间
	AlarmRuleInfo             *AlarmRuleInfo        `protobuf:"bytes,34,opt,name=alarm_rule_info,json=alarmRuleInfo,proto3" json:"alarm_rule_info,omitempty"`                                     // 数值状态
	Asset                     *TpmtAssetFindOneResp `protobuf:"bytes,35,opt,name=asset,proto3" json:"asset,omitempty"`                                                                            // 资产信息
}

func (x *TpmtMonitorPointRealTimeData) Reset() {
	*x = TpmtMonitorPointRealTimeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointRealTimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointRealTimeData) ProtoMessage() {}

func (x *TpmtMonitorPointRealTimeData) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointRealTimeData.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointRealTimeData) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{28}
}

func (x *TpmtMonitorPointRealTimeData) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetResultValue() string {
	if x != nil {
		return x.ResultValue
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeData) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeData) GetAlarmRuleInfo() *AlarmRuleInfo {
	if x != nil {
		return x.AlarmRuleInfo
	}
	return nil
}

func (x *TpmtMonitorPointRealTimeData) GetAsset() *TpmtAssetFindOneResp {
	if x != nil {
		return x.Asset
	}
	return nil
}

// TpmtMonitorPoint 单个查询
type TpmtMonitorPointRealTimeFindOneReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 监测点ID
}

func (x *TpmtMonitorPointRealTimeFindOneReq) Reset() {
	*x = TpmtMonitorPointRealTimeFindOneReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointRealTimeFindOneReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointRealTimeFindOneReq) ProtoMessage() {}

func (x *TpmtMonitorPointRealTimeFindOneReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointRealTimeFindOneReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointRealTimeFindOneReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{29}
}

func (x *TpmtMonitorPointRealTimeFindOneReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// TpmtMonitorPoint 单个查询返回
type TpmtMonitorPointRealTimeFindOneResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	CreatedAt                 int64                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 创建时间
	UpdatedAt                 int64                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 更新时间
	CreatedName               string                `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	UpdatedName               string                `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string                `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string                `protobuf:"bytes,8,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64                 `protobuf:"varint,9,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令 1: 02  2:03  3:04
	PointAnalysisRule         int64                 `protobuf:"varint,10,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                        // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64                 `protobuf:"varint,11,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                  // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64                 `protobuf:"varint,12,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                      // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64                 `protobuf:"varint,13,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64                 `protobuf:"varint,14,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string                `protobuf:"bytes,15,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64                 `protobuf:"varint,16,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64               `protobuf:"fixed64,17,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64                 `protobuf:"varint,18,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string                `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64                 `protobuf:"varint,20,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64               `protobuf:"fixed64,21,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64               `protobuf:"fixed64,22,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64               `protobuf:"fixed64,23,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64               `protobuf:"fixed64,24,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64                 `protobuf:"varint,25,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string                `protobuf:"bytes,26,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string                `protobuf:"bytes,27,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产Id
	Sort                      int64                 `protobuf:"varint,28,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
	ResultValue               string                `protobuf:"bytes,32,opt,name=result_value,json=resultValue,proto3" json:"result_value,omitempty"`                                             // 监测值
	UpdateTime                int64                 `protobuf:"varint,33,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`                                               // 更新时间
	AlarmRuleInfo             *AlarmRuleInfo        `protobuf:"bytes,34,opt,name=alarm_rule_info,json=alarmRuleInfo,proto3" json:"alarm_rule_info,omitempty"`                                     // 数值状态
	Asset                     *TpmtAssetFindOneResp `protobuf:"bytes,35,opt,name=asset,proto3" json:"asset,omitempty"`                                                                            // 资产信息
}

func (x *TpmtMonitorPointRealTimeFindOneResp) Reset() {
	*x = TpmtMonitorPointRealTimeFindOneResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointRealTimeFindOneResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointRealTimeFindOneResp) ProtoMessage() {}

func (x *TpmtMonitorPointRealTimeFindOneResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointRealTimeFindOneResp.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointRealTimeFindOneResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{30}
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetResultValue() string {
	if x != nil {
		return x.ResultValue
	}
	return ""
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAlarmRuleInfo() *AlarmRuleInfo {
	if x != nil {
		return x.AlarmRuleInfo
	}
	return nil
}

func (x *TpmtMonitorPointRealTimeFindOneResp) GetAsset() *TpmtAssetFindOneResp {
	if x != nil {
		return x.Asset
	}
	return nil
}

// 获取单个监测点历史数据
type TpmtMonitorPointHistoricalReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                     //监测点ID
	TimeRangeStartDayTime int64 `protobuf:"varint,2,opt,name=timeRangeStartDayTime,proto3" json:"timeRangeStartDayTime,omitempty"`               // 开始天数
	TimeRangeEndDayTime   int64 `protobuf:"varint,3,opt,name=timeRangeEndDayTime,proto3" json:"timeRangeEndDayTime,omitempty"`                   // 结束天数
	IsPrediction          int64 `protobuf:"varint,4,opt,name=is_prediction,json=isPrediction,proto3" json:"is_prediction,omitempty"`             // 是否预测
	PredictionNumber      int64 `protobuf:"varint,5,opt,name=prediction_number,json=predictionNumber,proto3" json:"prediction_number,omitempty"` // 预测数值个数
}

func (x *TpmtMonitorPointHistoricalReq) Reset() {
	*x = TpmtMonitorPointHistoricalReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointHistoricalReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointHistoricalReq) ProtoMessage() {}

func (x *TpmtMonitorPointHistoricalReq) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointHistoricalReq.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointHistoricalReq) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{31}
}

func (x *TpmtMonitorPointHistoricalReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalReq) GetTimeRangeStartDayTime() int64 {
	if x != nil {
		return x.TimeRangeStartDayTime
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalReq) GetTimeRangeEndDayTime() int64 {
	if x != nil {
		return x.TimeRangeEndDayTime
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalReq) GetIsPrediction() int64 {
	if x != nil {
		return x.IsPrediction
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalReq) GetPredictionNumber() int64 {
	if x != nil {
		return x.PredictionNumber
	}
	return 0
}

type TpmtMonitorPointHistoricalResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        int64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                  // 监测点ID
	CreatedAt                 int64                                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                                                   // 创建时间
	UpdatedAt                 int64                                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`                                                   // 更新时间
	CreatedName               string                                `protobuf:"bytes,4,opt,name=created_name,json=createdName,proto3" json:"created_name,omitempty"`                                              // 创建人
	UpdatedName               string                                `protobuf:"bytes,5,opt,name=updated_name,json=updatedName,proto3" json:"updated_name,omitempty"`                                              // 更新人
	SerialNumber              string                                `protobuf:"bytes,6,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                                           // 编号
	Name                      string                                `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                                               // 监测点名称
	RegisterAddress           string                                `protobuf:"bytes,8,opt,name=register_address,json=registerAddress,proto3" json:"register_address,omitempty"`                                  // 寄存器地址
	PointCollectorInstruction int64                                 `protobuf:"varint,9,opt,name=point_collector_instruction,json=pointCollectorInstruction,proto3" json:"point_collector_instruction,omitempty"` // 采集器指令 1: 02  2:03  3:04
	PointAnalysisRule         int64                                 `protobuf:"varint,10,opt,name=point_analysis_rule,json=pointAnalysisRule,proto3" json:"point_analysis_rule,omitempty"`                        // 采集器解析规则 1: 16位无符号/2:单精度浮点数
	PointType                 int64                                 `protobuf:"varint,11,opt,name=point_type,json=pointType,proto3" json:"point_type,omitempty"`                                                  // 类型：1:综保/2:局放/3:测温/4:微水/5:油色谱/6:机器人/7:其他
	PointCategory             int64                                 `protobuf:"varint,12,opt,name=point_category,json=pointCategory,proto3" json:"point_category,omitempty"`                                      // 类别：1:遥信/2:遥测/3:遥脉
	PointGroup                int64                                 `protobuf:"varint,13,opt,name=point_group,json=pointGroup,proto3" json:"point_group,omitempty"`                                               // 分组
	CircuitType               int64                                 `protobuf:"varint,14,opt,name=circuit_type,json=circuitType,proto3" json:"circuit_type,omitempty"`                                            // 回路类型
	YxDecode                  string                                `protobuf:"bytes,15,opt,name=yx_decode,json=yxDecode,proto3" json:"yx_decode,omitempty"`                                                      // 遥信解译
	DataBits                  int64                                 `protobuf:"varint,16,opt,name=data_bits,json=dataBits,proto3" json:"data_bits,omitempty"`                                                     // 数据位
	Coefficient               float64                               `protobuf:"fixed64,17,opt,name=coefficient,proto3" json:"coefficient,omitempty"`                                                              // 系数
	RetainDecimals            int64                                 `protobuf:"varint,18,opt,name=retain_decimals,json=retainDecimals,proto3" json:"retain_decimals,omitempty"`                                   // 保留小数位
	Unit                      string                                `protobuf:"bytes,19,opt,name=unit,proto3" json:"unit,omitempty"`                                                                              // 单位
	AlarmDuration             int64                                 `protobuf:"varint,20,opt,name=alarm_duration,json=alarmDuration,proto3" json:"alarm_duration,omitempty"`                                      // 持续时间
	AlarmUpValue              float64                               `protobuf:"fixed64,21,opt,name=alarm_up_value,json=alarmUpValue,proto3" json:"alarm_up_value,omitempty"`                                      // 告警上限
	AlarmDownValue            float64                               `protobuf:"fixed64,22,opt,name=alarm_down_value,json=alarmDownValue,proto3" json:"alarm_down_value,omitempty"`                                // 告警下限
	WarningUpValue            float64                               `protobuf:"fixed64,23,opt,name=warning_up_value,json=warningUpValue,proto3" json:"warning_up_value,omitempty"`                                // 预警上限
	WarningDownValue          float64                               `protobuf:"fixed64,24,opt,name=warning_down_value,json=warningDownValue,proto3" json:"warning_down_value,omitempty"`                          // 预警下限
	IsDisplacementWarning     int64                                 `protobuf:"varint,25,opt,name=is_displacement_warning,json=isDisplacementWarning,proto3" json:"is_displacement_warning,omitempty"`            // 变位预警 0 不启用 1:启用
	TpmtGatewayId             string                                `protobuf:"bytes,26,opt,name=tpmt_gateway_id,json=tpmtGatewayId,proto3" json:"tpmt_gateway_id,omitempty"`                                     // 网关ID
	AssetId                   string                                `protobuf:"bytes,27,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`                                                         // 资产柜号
	AssetName                 string                                `protobuf:"bytes,28,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`                                                   // 资产名称
	Sort                      int64                                 `protobuf:"varint,29,opt,name=sort,proto3" json:"sort,omitempty"`                                                                             // 排序
	List                      []*TpmtMonitorPointHistoricalListData `protobuf:"bytes,33,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TpmtMonitorPointHistoricalResp) Reset() {
	*x = TpmtMonitorPointHistoricalResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointHistoricalResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointHistoricalResp) ProtoMessage() {}

func (x *TpmtMonitorPointHistoricalResp) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointHistoricalResp.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointHistoricalResp) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{32}
}

func (x *TpmtMonitorPointHistoricalResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetCreatedName() string {
	if x != nil {
		return x.CreatedName
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetUpdatedName() string {
	if x != nil {
		return x.UpdatedName
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetRegisterAddress() string {
	if x != nil {
		return x.RegisterAddress
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetPointCollectorInstruction() int64 {
	if x != nil {
		return x.PointCollectorInstruction
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetPointAnalysisRule() int64 {
	if x != nil {
		return x.PointAnalysisRule
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetPointType() int64 {
	if x != nil {
		return x.PointType
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetPointCategory() int64 {
	if x != nil {
		return x.PointCategory
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetPointGroup() int64 {
	if x != nil {
		return x.PointGroup
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetCircuitType() int64 {
	if x != nil {
		return x.CircuitType
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetYxDecode() string {
	if x != nil {
		return x.YxDecode
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetDataBits() int64 {
	if x != nil {
		return x.DataBits
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetCoefficient() float64 {
	if x != nil {
		return x.Coefficient
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetRetainDecimals() int64 {
	if x != nil {
		return x.RetainDecimals
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetAlarmDuration() int64 {
	if x != nil {
		return x.AlarmDuration
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetAlarmUpValue() float64 {
	if x != nil {
		return x.AlarmUpValue
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetAlarmDownValue() float64 {
	if x != nil {
		return x.AlarmDownValue
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetWarningUpValue() float64 {
	if x != nil {
		return x.WarningUpValue
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetWarningDownValue() float64 {
	if x != nil {
		return x.WarningDownValue
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetIsDisplacementWarning() int64 {
	if x != nil {
		return x.IsDisplacementWarning
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetTpmtGatewayId() string {
	if x != nil {
		return x.TpmtGatewayId
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetAssetName() string {
	if x != nil {
		return x.AssetName
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalResp) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *TpmtMonitorPointHistoricalResp) GetList() []*TpmtMonitorPointHistoricalListData {
	if x != nil {
		return x.List
	}
	return nil
}

type TpmtMonitorPointHistoricalListData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonitorValue string `protobuf:"bytes,1,opt,name=monitor_value,json=monitorValue,proto3" json:"monitor_value,omitempty"` // 监测值
	CreateTime   int64  `protobuf:"varint,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`      // 监测点创建时间
}

func (x *TpmtMonitorPointHistoricalListData) Reset() {
	*x = TpmtMonitorPointHistoricalListData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tpmt_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TpmtMonitorPointHistoricalListData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TpmtMonitorPointHistoricalListData) ProtoMessage() {}

func (x *TpmtMonitorPointHistoricalListData) ProtoReflect() protoreflect.Message {
	mi := &file_tpmt_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TpmtMonitorPointHistoricalListData.ProtoReflect.Descriptor instead.
func (*TpmtMonitorPointHistoricalListData) Descriptor() ([]byte, []int) {
	return file_tpmt_proto_rawDescGZIP(), []int{33}
}

func (x *TpmtMonitorPointHistoricalListData) GetMonitorValue() string {
	if x != nil {
		return x.MonitorValue
	}
	return ""
}

func (x *TpmtMonitorPointHistoricalListData) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

var File_tpmt_proto protoreflect.FileDescriptor

var file_tpmt_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x70, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x74, 0x70,
	0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5f, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x75, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x54, 0x70, 0x6d, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e,
	0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa0, 0x02,
	0x0a, 0x12, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x25, 0x0a, 0x13, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x83, 0x03, 0x0a, 0x14, 0x54, 0x70, 0x6d, 0x74,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xa2, 0x02,
	0x0a, 0x10, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x5c, 0x0a, 0x11, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x70,
	0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x80, 0x03, 0x0a, 0x11, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xee, 0x02, 0x0a, 0x11, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e,
	0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72,
	0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f,
	0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x81, 0x03, 0x0a,
	0x14, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x27, 0x0a, 0x15, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46,
	0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe4, 0x03, 0x0a, 0x16, 0x54, 0x70,
	0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x83, 0x03, 0x0a, 0x12, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x61, 0x6e, 0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75,
	0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x61,
	0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x60, 0x0a, 0x13, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe1, 0x03, 0x0a, 0x13, 0x54, 0x70, 0x6d,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x23, 0x0a, 0x0d,
	0x6d, 0x61, 0x6e, 0x75, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x6e, 0x75, 0x46, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x75, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x07, 0x0a,
	0x16, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e,
	0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x78, 0x5f, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x78, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44,
	0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22,
	0x2b, 0x0a, 0x19, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xfb, 0x06, 0x0a,
	0x19, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x73, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79,
	0x78, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x79, 0x78, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69,
	0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77,
	0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x2c, 0x0a, 0x1a, 0x54, 0x70,
	0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x86, 0x08, 0x0a, 0x1b, 0x54, 0x70, 0x6d,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x78,
	0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79,
	0x78, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x62, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66,
	0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e,
	0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c,
	0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70,
	0x6d, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72,
	0x74, 0x22, 0xc6, 0x04, 0x0a, 0x17, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x18, 0x54, 0x70,
	0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x70, 0x6d,
	0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x83, 0x08, 0x0a, 0x18, 0x54, 0x70, 0x6d, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x78, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xde, 0x02, 0x0a,
	0x1f, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70,
	0x6d, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x76, 0x0a,
	0x20, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xc6, 0x09, 0x0a, 0x1c, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e,
	0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x78, 0x5f, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x78, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69,
	0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72,
	0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69,
	0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72,
	0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44,
	0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74,
	0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52,
	0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x34,
	0x0a, 0x22, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xcd, 0x09, 0x0a, 0x23, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x79, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x79, 0x78, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65,
	0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d,
	0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x6c, 0x61,
	0x72, 0x6d, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x70,
	0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x1d, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69,
	0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x74, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x22, 0xec, 0x08, 0x0a, 0x1e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3e, 0x0a, 0x1b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x19, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x79, 0x78, 0x5f, 0x64, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x79, 0x78, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x65, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x61,
	0x69, 0x6e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x75,
	0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x6c, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x61, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x55, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x77, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a,
	0x17, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15,
	0x69, 0x73, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x70, 0x6d, 0x74, 0x5f, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x21, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x70, 0x6d, 0x74,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x6a, 0x0a, 0x22, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xe7, 0x0c, 0x0a, 0x04,
	0x54, 0x70, 0x6d, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x12, 0x1b, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0f, 0x54, 0x70, 0x6d,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x74,
	0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74,
	0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x49, 0x0a, 0x0f, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x55, 0x0a, 0x10, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64,
	0x4f, 0x6e, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f,
	0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0d, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0e, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x41, 0x64, 0x64, 0x12, 0x1d, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x41,
	0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a,
	0x11, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x11,
	0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5b, 0x0a, 0x12, 0x54,
	0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x12, 0x21, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54,
	0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x46, 0x69, 0x6e,
	0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x52, 0x0a, 0x0f, 0x54, 0x70, 0x6d, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x70,
	0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x74, 0x70,
	0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x13,
	0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x12, 0x22, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x57, 0x0a, 0x16, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x70, 0x6d, 0x74,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x16, 0x54, 0x70, 0x6d, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x74, 0x70, 0x6d, 0x74,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x6a, 0x0a, 0x17, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x12, 0x26, 0x2e, 0x74,
	0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x61, 0x0a,
	0x14, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x74, 0x70, 0x6d,
	0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x79, 0x0a, 0x1c, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2b, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70,
	0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x2c, 0x2e,
	0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d,
	0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x82, 0x01, 0x0a, 0x1f,
	0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x12,
	0x2e, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x2f, 0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d,
	0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x4f, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x73, 0x0a, 0x1a, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x12, 0x29,
	0x2e, 0x74, 0x70, 0x6d, 0x74, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x2a, 0x2e, 0x74, 0x70, 0x6d, 0x74,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x70, 0x6d, 0x74, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x42, 0x0e, 0x5a, 0x0c, 0x2e, 0x2f, 0x74, 0x70, 0x6d, 0x74, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tpmt_proto_rawDescOnce sync.Once
	file_tpmt_proto_rawDescData = file_tpmt_proto_rawDesc
)

func file_tpmt_proto_rawDescGZIP() []byte {
	file_tpmt_proto_rawDescOnce.Do(func() {
		file_tpmt_proto_rawDescData = protoimpl.X.CompressGZIP(file_tpmt_proto_rawDescData)
	})
	return file_tpmt_proto_rawDescData
}

var file_tpmt_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_tpmt_proto_goTypes = []interface{}{
	(*CommonResp)(nil),                          // 0: tpmtclient.CommonResp
	(*AlarmRuleInfo)(nil),                       // 1: tpmtclient.AlarmRuleInfo
	(*TpmtAssetAddReq)(nil),                     // 2: tpmtclient.TpmtAssetAddReq
	(*TpmtAssetDeleteReq)(nil),                  // 3: tpmtclient.TpmtAssetDeleteReq
	(*TpmtAssetUpdateReq)(nil),                  // 4: tpmtclient.TpmtAssetUpdateReq
	(*TpmtAssetFindOneReq)(nil),                 // 5: tpmtclient.TpmtAssetFindOneReq
	(*TpmtAssetFindOneResp)(nil),                // 6: tpmtclient.TpmtAssetFindOneResp
	(*TpmtAssetListReq)(nil),                    // 7: tpmtclient.TpmtAssetListReq
	(*TpmtAssetListResp)(nil),                   // 8: tpmtclient.TpmtAssetListResp
	(*TpmtAssetListData)(nil),                   // 9: tpmtclient.TpmtAssetListData
	(*TpmtGatewayAddReq)(nil),                   // 10: tpmtclient.TpmtGatewayAddReq
	(*TpmtGatewayDeleteReq)(nil),                // 11: tpmtclient.TpmtGatewayDeleteReq
	(*TpmtGatewayUpdateReq)(nil),                // 12: tpmtclient.TpmtGatewayUpdateReq
	(*TpmtGatewayFindOneReq)(nil),               // 13: tpmtclient.TpmtGatewayFindOneReq
	(*TpmtGatewayFindOneResp)(nil),              // 14: tpmtclient.TpmtGatewayFindOneResp
	(*TpmtGatewayListReq)(nil),                  // 15: tpmtclient.TpmtGatewayListReq
	(*TpmtGatewayListResp)(nil),                 // 16: tpmtclient.TpmtGatewayListResp
	(*TpmtGatewayListData)(nil),                 // 17: tpmtclient.TpmtGatewayListData
	(*TpmtMonitorPointAddReq)(nil),              // 18: tpmtclient.TpmtMonitorPointAddReq
	(*TpmtMonitorPointDeleteReq)(nil),           // 19: tpmtclient.TpmtMonitorPointDeleteReq
	(*TpmtMonitorPointUpdateReq)(nil),           // 20: tpmtclient.TpmtMonitorPointUpdateReq
	(*TpmtMonitorPointFindOneReq)(nil),          // 21: tpmtclient.TpmtMonitorPointFindOneReq
	(*TpmtMonitorPointFindOneResp)(nil),         // 22: tpmtclient.TpmtMonitorPointFindOneResp
	(*TpmtMonitorPointListReq)(nil),             // 23: tpmtclient.TpmtMonitorPointListReq
	(*TpmtMonitorPointListResp)(nil),            // 24: tpmtclient.TpmtMonitorPointListResp
	(*TpmtMonitorPointListData)(nil),            // 25: tpmtclient.TpmtMonitorPointListData
	(*TpmtMonitorPointRealTimeListReq)(nil),     // 26: tpmtclient.TpmtMonitorPointRealTimeListReq
	(*TpmtMonitorPointRealTimeListResp)(nil),    // 27: tpmtclient.TpmtMonitorPointRealTimeListResp
	(*TpmtMonitorPointRealTimeData)(nil),        // 28: tpmtclient.TpmtMonitorPointRealTimeData
	(*TpmtMonitorPointRealTimeFindOneReq)(nil),  // 29: tpmtclient.TpmtMonitorPointRealTimeFindOneReq
	(*TpmtMonitorPointRealTimeFindOneResp)(nil), // 30: tpmtclient.TpmtMonitorPointRealTimeFindOneResp
	(*TpmtMonitorPointHistoricalReq)(nil),       // 31: tpmtclient.TpmtMonitorPointHistoricalReq
	(*TpmtMonitorPointHistoricalResp)(nil),      // 32: tpmtclient.TpmtMonitorPointHistoricalResp
	(*TpmtMonitorPointHistoricalListData)(nil),  // 33: tpmtclient.TpmtMonitorPointHistoricalListData
}
var file_tpmt_proto_depIdxs = []int32{
	9,  // 0: tpmtclient.TpmtAssetListResp.list:type_name -> tpmtclient.TpmtAssetListData
	17, // 1: tpmtclient.TpmtGatewayListResp.list:type_name -> tpmtclient.TpmtGatewayListData
	25, // 2: tpmtclient.TpmtMonitorPointListResp.list:type_name -> tpmtclient.TpmtMonitorPointListData
	28, // 3: tpmtclient.TpmtMonitorPointRealTimeListResp.list:type_name -> tpmtclient.TpmtMonitorPointRealTimeData
	1,  // 4: tpmtclient.TpmtMonitorPointRealTimeData.alarm_rule_info:type_name -> tpmtclient.AlarmRuleInfo
	6,  // 5: tpmtclient.TpmtMonitorPointRealTimeData.asset:type_name -> tpmtclient.TpmtAssetFindOneResp
	1,  // 6: tpmtclient.TpmtMonitorPointRealTimeFindOneResp.alarm_rule_info:type_name -> tpmtclient.AlarmRuleInfo
	6,  // 7: tpmtclient.TpmtMonitorPointRealTimeFindOneResp.asset:type_name -> tpmtclient.TpmtAssetFindOneResp
	33, // 8: tpmtclient.TpmtMonitorPointHistoricalResp.list:type_name -> tpmtclient.TpmtMonitorPointHistoricalListData
	2,  // 9: tpmtclient.Tpmt.TpmtAssetAdd:input_type -> tpmtclient.TpmtAssetAddReq
	3,  // 10: tpmtclient.Tpmt.TpmtAssetDelete:input_type -> tpmtclient.TpmtAssetDeleteReq
	4,  // 11: tpmtclient.Tpmt.TpmtAssetUpdate:input_type -> tpmtclient.TpmtAssetUpdateReq
	5,  // 12: tpmtclient.Tpmt.TpmtAssetFindOne:input_type -> tpmtclient.TpmtAssetFindOneReq
	7,  // 13: tpmtclient.Tpmt.TpmtAssetList:input_type -> tpmtclient.TpmtAssetListReq
	10, // 14: tpmtclient.Tpmt.TpmtGatewayAdd:input_type -> tpmtclient.TpmtGatewayAddReq
	11, // 15: tpmtclient.Tpmt.TpmtGatewayDelete:input_type -> tpmtclient.TpmtGatewayDeleteReq
	12, // 16: tpmtclient.Tpmt.TpmtGatewayUpdate:input_type -> tpmtclient.TpmtGatewayUpdateReq
	13, // 17: tpmtclient.Tpmt.TpmtGatewayFindOne:input_type -> tpmtclient.TpmtGatewayFindOneReq
	15, // 18: tpmtclient.Tpmt.TpmtGatewayList:input_type -> tpmtclient.TpmtGatewayListReq
	18, // 19: tpmtclient.Tpmt.TpmtMonitorPointAdd:input_type -> tpmtclient.TpmtMonitorPointAddReq
	19, // 20: tpmtclient.Tpmt.TpmtMonitorPointDelete:input_type -> tpmtclient.TpmtMonitorPointDeleteReq
	20, // 21: tpmtclient.Tpmt.TpmtMonitorPointUpdate:input_type -> tpmtclient.TpmtMonitorPointUpdateReq
	21, // 22: tpmtclient.Tpmt.TpmtMonitorPointFindOne:input_type -> tpmtclient.TpmtMonitorPointFindOneReq
	23, // 23: tpmtclient.Tpmt.TpmtMonitorPointList:input_type -> tpmtclient.TpmtMonitorPointListReq
	26, // 24: tpmtclient.Tpmt.TpmtMonitorPointRealTimeList:input_type -> tpmtclient.TpmtMonitorPointRealTimeListReq
	29, // 25: tpmtclient.Tpmt.TpmtMonitorPointRealTimeFindOne:input_type -> tpmtclient.TpmtMonitorPointRealTimeFindOneReq
	31, // 26: tpmtclient.Tpmt.TpmtMonitorPointHistorical:input_type -> tpmtclient.TpmtMonitorPointHistoricalReq
	0,  // 27: tpmtclient.Tpmt.TpmtAssetAdd:output_type -> tpmtclient.CommonResp
	0,  // 28: tpmtclient.Tpmt.TpmtAssetDelete:output_type -> tpmtclient.CommonResp
	0,  // 29: tpmtclient.Tpmt.TpmtAssetUpdate:output_type -> tpmtclient.CommonResp
	6,  // 30: tpmtclient.Tpmt.TpmtAssetFindOne:output_type -> tpmtclient.TpmtAssetFindOneResp
	8,  // 31: tpmtclient.Tpmt.TpmtAssetList:output_type -> tpmtclient.TpmtAssetListResp
	0,  // 32: tpmtclient.Tpmt.TpmtGatewayAdd:output_type -> tpmtclient.CommonResp
	0,  // 33: tpmtclient.Tpmt.TpmtGatewayDelete:output_type -> tpmtclient.CommonResp
	0,  // 34: tpmtclient.Tpmt.TpmtGatewayUpdate:output_type -> tpmtclient.CommonResp
	14, // 35: tpmtclient.Tpmt.TpmtGatewayFindOne:output_type -> tpmtclient.TpmtGatewayFindOneResp
	16, // 36: tpmtclient.Tpmt.TpmtGatewayList:output_type -> tpmtclient.TpmtGatewayListResp
	0,  // 37: tpmtclient.Tpmt.TpmtMonitorPointAdd:output_type -> tpmtclient.CommonResp
	0,  // 38: tpmtclient.Tpmt.TpmtMonitorPointDelete:output_type -> tpmtclient.CommonResp
	0,  // 39: tpmtclient.Tpmt.TpmtMonitorPointUpdate:output_type -> tpmtclient.CommonResp
	22, // 40: tpmtclient.Tpmt.TpmtMonitorPointFindOne:output_type -> tpmtclient.TpmtMonitorPointFindOneResp
	24, // 41: tpmtclient.Tpmt.TpmtMonitorPointList:output_type -> tpmtclient.TpmtMonitorPointListResp
	27, // 42: tpmtclient.Tpmt.TpmtMonitorPointRealTimeList:output_type -> tpmtclient.TpmtMonitorPointRealTimeListResp
	30, // 43: tpmtclient.Tpmt.TpmtMonitorPointRealTimeFindOne:output_type -> tpmtclient.TpmtMonitorPointRealTimeFindOneResp
	32, // 44: tpmtclient.Tpmt.TpmtMonitorPointHistorical:output_type -> tpmtclient.TpmtMonitorPointHistoricalResp
	27, // [27:45] is the sub-list for method output_type
	9,  // [9:27] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_tpmt_proto_init() }
func file_tpmt_proto_init() {
	if File_tpmt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tpmt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmRuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtAssetListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtGatewayListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointAddReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointRealTimeListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointRealTimeListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointRealTimeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointRealTimeFindOneReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointRealTimeFindOneResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointHistoricalReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointHistoricalResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tpmt_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TpmtMonitorPointHistoricalListData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tpmt_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tpmt_proto_goTypes,
		DependencyIndexes: file_tpmt_proto_depIdxs,
		MessageInfos:      file_tpmt_proto_msgTypes,
	}.Build()
	File_tpmt_proto = out.File
	file_tpmt_proto_rawDesc = nil
	file_tpmt_proto_goTypes = nil
	file_tpmt_proto_depIdxs = nil
}
