// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpmtclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TpmtClient is the client API for Tpmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpmtClient interface {
	// 资产
	TpmtAssetAdd(ctx context.Context, in *TpmtAssetAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtAssetDelete(ctx context.Context, in *TpmtAssetDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtAssetUpdate(ctx context.Context, in *TpmtAssetUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtAssetFindOne(ctx context.Context, in *TpmtAssetFindOneReq, opts ...grpc.CallOption) (*TpmtAssetFindOneResp, error)
	TpmtAssetList(ctx context.Context, in *TpmtAssetListReq, opts ...grpc.CallOption) (*TpmtAssetListResp, error)
	// 网关
	TpmtGatewayAdd(ctx context.Context, in *TpmtGatewayAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtGatewayDelete(ctx context.Context, in *TpmtGatewayDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtGatewayUpdate(ctx context.Context, in *TpmtGatewayUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtGatewayFindOne(ctx context.Context, in *TpmtGatewayFindOneReq, opts ...grpc.CallOption) (*TpmtGatewayFindOneResp, error)
	TpmtGatewayList(ctx context.Context, in *TpmtGatewayListReq, opts ...grpc.CallOption) (*TpmtGatewayListResp, error)
	// 监控点
	TpmtMonitorPointAdd(ctx context.Context, in *TpmtMonitorPointAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtMonitorPointDelete(ctx context.Context, in *TpmtMonitorPointDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtMonitorPointUpdate(ctx context.Context, in *TpmtMonitorPointUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	TpmtMonitorPointFindOne(ctx context.Context, in *TpmtMonitorPointFindOneReq, opts ...grpc.CallOption) (*TpmtMonitorPointFindOneResp, error)
	TpmtMonitorPointList(ctx context.Context, in *TpmtMonitorPointListReq, opts ...grpc.CallOption) (*TpmtMonitorPointListResp, error)
	// 分页获取监测点实时数据
	TpmtMonitorPointRealTimeList(ctx context.Context, in *TpmtMonitorPointRealTimeListReq, opts ...grpc.CallOption) (*TpmtMonitorPointRealTimeListResp, error)
	// 获取单个监测点数据
	TpmtMonitorPointRealTimeFindOne(ctx context.Context, in *TpmtMonitorPointRealTimeFindOneReq, opts ...grpc.CallOption) (*TpmtMonitorPointRealTimeFindOneResp, error)
	// 获取监测点历史数据接口
	TpmtMonitorPointHistorical(ctx context.Context, in *TpmtMonitorPointHistoricalReq, opts ...grpc.CallOption) (*TpmtMonitorPointHistoricalResp, error)
}

type tpmtClient struct {
	cc grpc.ClientConnInterface
}

func NewTpmtClient(cc grpc.ClientConnInterface) TpmtClient {
	return &tpmtClient{cc}
}

func (c *tpmtClient) TpmtAssetAdd(ctx context.Context, in *TpmtAssetAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtAssetAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtAssetDelete(ctx context.Context, in *TpmtAssetDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtAssetDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtAssetUpdate(ctx context.Context, in *TpmtAssetUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtAssetUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtAssetFindOne(ctx context.Context, in *TpmtAssetFindOneReq, opts ...grpc.CallOption) (*TpmtAssetFindOneResp, error) {
	out := new(TpmtAssetFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtAssetFindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtAssetList(ctx context.Context, in *TpmtAssetListReq, opts ...grpc.CallOption) (*TpmtAssetListResp, error) {
	out := new(TpmtAssetListResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtAssetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtGatewayAdd(ctx context.Context, in *TpmtGatewayAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtGatewayAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtGatewayDelete(ctx context.Context, in *TpmtGatewayDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtGatewayDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtGatewayUpdate(ctx context.Context, in *TpmtGatewayUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtGatewayUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtGatewayFindOne(ctx context.Context, in *TpmtGatewayFindOneReq, opts ...grpc.CallOption) (*TpmtGatewayFindOneResp, error) {
	out := new(TpmtGatewayFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtGatewayFindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtGatewayList(ctx context.Context, in *TpmtGatewayListReq, opts ...grpc.CallOption) (*TpmtGatewayListResp, error) {
	out := new(TpmtGatewayListResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtGatewayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointAdd(ctx context.Context, in *TpmtMonitorPointAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointDelete(ctx context.Context, in *TpmtMonitorPointDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointUpdate(ctx context.Context, in *TpmtMonitorPointUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointFindOne(ctx context.Context, in *TpmtMonitorPointFindOneReq, opts ...grpc.CallOption) (*TpmtMonitorPointFindOneResp, error) {
	out := new(TpmtMonitorPointFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointFindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointList(ctx context.Context, in *TpmtMonitorPointListReq, opts ...grpc.CallOption) (*TpmtMonitorPointListResp, error) {
	out := new(TpmtMonitorPointListResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointRealTimeList(ctx context.Context, in *TpmtMonitorPointRealTimeListReq, opts ...grpc.CallOption) (*TpmtMonitorPointRealTimeListResp, error) {
	out := new(TpmtMonitorPointRealTimeListResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointRealTimeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointRealTimeFindOne(ctx context.Context, in *TpmtMonitorPointRealTimeFindOneReq, opts ...grpc.CallOption) (*TpmtMonitorPointRealTimeFindOneResp, error) {
	out := new(TpmtMonitorPointRealTimeFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointRealTimeFindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) TpmtMonitorPointHistorical(ctx context.Context, in *TpmtMonitorPointHistoricalReq, opts ...grpc.CallOption) (*TpmtMonitorPointHistoricalResp, error) {
	out := new(TpmtMonitorPointHistoricalResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/TpmtMonitorPointHistorical", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TpmtServer is the server API for Tpmt service.
// All implementations must embed UnimplementedTpmtServer
// for forward compatibility
type TpmtServer interface {
	// 资产
	TpmtAssetAdd(context.Context, *TpmtAssetAddReq) (*CommonResp, error)
	TpmtAssetDelete(context.Context, *TpmtAssetDeleteReq) (*CommonResp, error)
	TpmtAssetUpdate(context.Context, *TpmtAssetUpdateReq) (*CommonResp, error)
	TpmtAssetFindOne(context.Context, *TpmtAssetFindOneReq) (*TpmtAssetFindOneResp, error)
	TpmtAssetList(context.Context, *TpmtAssetListReq) (*TpmtAssetListResp, error)
	// 网关
	TpmtGatewayAdd(context.Context, *TpmtGatewayAddReq) (*CommonResp, error)
	TpmtGatewayDelete(context.Context, *TpmtGatewayDeleteReq) (*CommonResp, error)
	TpmtGatewayUpdate(context.Context, *TpmtGatewayUpdateReq) (*CommonResp, error)
	TpmtGatewayFindOne(context.Context, *TpmtGatewayFindOneReq) (*TpmtGatewayFindOneResp, error)
	TpmtGatewayList(context.Context, *TpmtGatewayListReq) (*TpmtGatewayListResp, error)
	// 监控点
	TpmtMonitorPointAdd(context.Context, *TpmtMonitorPointAddReq) (*CommonResp, error)
	TpmtMonitorPointDelete(context.Context, *TpmtMonitorPointDeleteReq) (*CommonResp, error)
	TpmtMonitorPointUpdate(context.Context, *TpmtMonitorPointUpdateReq) (*CommonResp, error)
	TpmtMonitorPointFindOne(context.Context, *TpmtMonitorPointFindOneReq) (*TpmtMonitorPointFindOneResp, error)
	TpmtMonitorPointList(context.Context, *TpmtMonitorPointListReq) (*TpmtMonitorPointListResp, error)
	// 分页获取监测点实时数据
	TpmtMonitorPointRealTimeList(context.Context, *TpmtMonitorPointRealTimeListReq) (*TpmtMonitorPointRealTimeListResp, error)
	// 获取单个监测点数据
	TpmtMonitorPointRealTimeFindOne(context.Context, *TpmtMonitorPointRealTimeFindOneReq) (*TpmtMonitorPointRealTimeFindOneResp, error)
	// 获取监测点历史数据接口
	TpmtMonitorPointHistorical(context.Context, *TpmtMonitorPointHistoricalReq) (*TpmtMonitorPointHistoricalResp, error)
	mustEmbedUnimplementedTpmtServer()
}

// UnimplementedTpmtServer must be embedded to have forward compatible implementations.
type UnimplementedTpmtServer struct {
}

func (UnimplementedTpmtServer) TpmtAssetAdd(context.Context, *TpmtAssetAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtAssetAdd not implemented")
}
func (UnimplementedTpmtServer) TpmtAssetDelete(context.Context, *TpmtAssetDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtAssetDelete not implemented")
}
func (UnimplementedTpmtServer) TpmtAssetUpdate(context.Context, *TpmtAssetUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtAssetUpdate not implemented")
}
func (UnimplementedTpmtServer) TpmtAssetFindOne(context.Context, *TpmtAssetFindOneReq) (*TpmtAssetFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtAssetFindOne not implemented")
}
func (UnimplementedTpmtServer) TpmtAssetList(context.Context, *TpmtAssetListReq) (*TpmtAssetListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtAssetList not implemented")
}
func (UnimplementedTpmtServer) TpmtGatewayAdd(context.Context, *TpmtGatewayAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtGatewayAdd not implemented")
}
func (UnimplementedTpmtServer) TpmtGatewayDelete(context.Context, *TpmtGatewayDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtGatewayDelete not implemented")
}
func (UnimplementedTpmtServer) TpmtGatewayUpdate(context.Context, *TpmtGatewayUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtGatewayUpdate not implemented")
}
func (UnimplementedTpmtServer) TpmtGatewayFindOne(context.Context, *TpmtGatewayFindOneReq) (*TpmtGatewayFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtGatewayFindOne not implemented")
}
func (UnimplementedTpmtServer) TpmtGatewayList(context.Context, *TpmtGatewayListReq) (*TpmtGatewayListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtGatewayList not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointAdd(context.Context, *TpmtMonitorPointAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointAdd not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointDelete(context.Context, *TpmtMonitorPointDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointDelete not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointUpdate(context.Context, *TpmtMonitorPointUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointUpdate not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointFindOne(context.Context, *TpmtMonitorPointFindOneReq) (*TpmtMonitorPointFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointFindOne not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointList(context.Context, *TpmtMonitorPointListReq) (*TpmtMonitorPointListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointList not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointRealTimeList(context.Context, *TpmtMonitorPointRealTimeListReq) (*TpmtMonitorPointRealTimeListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointRealTimeList not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointRealTimeFindOne(context.Context, *TpmtMonitorPointRealTimeFindOneReq) (*TpmtMonitorPointRealTimeFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointRealTimeFindOne not implemented")
}
func (UnimplementedTpmtServer) TpmtMonitorPointHistorical(context.Context, *TpmtMonitorPointHistoricalReq) (*TpmtMonitorPointHistoricalResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TpmtMonitorPointHistorical not implemented")
}
func (UnimplementedTpmtServer) mustEmbedUnimplementedTpmtServer() {}

// UnsafeTpmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpmtServer will
// result in compilation errors.
type UnsafeTpmtServer interface {
	mustEmbedUnimplementedTpmtServer()
}

func RegisterTpmtServer(s grpc.ServiceRegistrar, srv TpmtServer) {
	s.RegisterService(&Tpmt_ServiceDesc, srv)
}

func _Tpmt_TpmtAssetAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtAssetAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtAssetAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtAssetAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtAssetAdd(ctx, req.(*TpmtAssetAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtAssetDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtAssetDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtAssetDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtAssetDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtAssetDelete(ctx, req.(*TpmtAssetDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtAssetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtAssetUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtAssetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtAssetUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtAssetUpdate(ctx, req.(*TpmtAssetUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtAssetFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtAssetFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtAssetFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtAssetFindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtAssetFindOne(ctx, req.(*TpmtAssetFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtAssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtAssetListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtAssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtAssetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtAssetList(ctx, req.(*TpmtAssetListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtGatewayAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtGatewayAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtGatewayAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtGatewayAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtGatewayAdd(ctx, req.(*TpmtGatewayAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtGatewayDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtGatewayDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtGatewayDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtGatewayDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtGatewayDelete(ctx, req.(*TpmtGatewayDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtGatewayUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtGatewayUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtGatewayUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtGatewayUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtGatewayUpdate(ctx, req.(*TpmtGatewayUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtGatewayFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtGatewayFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtGatewayFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtGatewayFindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtGatewayFindOne(ctx, req.(*TpmtGatewayFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtGatewayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtGatewayListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtGatewayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtGatewayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtGatewayList(ctx, req.(*TpmtGatewayListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointAdd(ctx, req.(*TpmtMonitorPointAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointDelete(ctx, req.(*TpmtMonitorPointDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointUpdate(ctx, req.(*TpmtMonitorPointUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointFindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointFindOne(ctx, req.(*TpmtMonitorPointFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointList(ctx, req.(*TpmtMonitorPointListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointRealTimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointRealTimeListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointRealTimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointRealTimeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointRealTimeList(ctx, req.(*TpmtMonitorPointRealTimeListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointRealTimeFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointRealTimeFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointRealTimeFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointRealTimeFindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointRealTimeFindOne(ctx, req.(*TpmtMonitorPointRealTimeFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_TpmtMonitorPointHistorical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TpmtMonitorPointHistoricalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).TpmtMonitorPointHistorical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/TpmtMonitorPointHistorical",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).TpmtMonitorPointHistorical(ctx, req.(*TpmtMonitorPointHistoricalReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tpmt_ServiceDesc is the grpc.ServiceDesc for Tpmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tpmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpmtclient.Tpmt",
	HandlerType: (*TpmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TpmtAssetAdd",
			Handler:    _Tpmt_TpmtAssetAdd_Handler,
		},
		{
			MethodName: "TpmtAssetDelete",
			Handler:    _Tpmt_TpmtAssetDelete_Handler,
		},
		{
			MethodName: "TpmtAssetUpdate",
			Handler:    _Tpmt_TpmtAssetUpdate_Handler,
		},
		{
			MethodName: "TpmtAssetFindOne",
			Handler:    _Tpmt_TpmtAssetFindOne_Handler,
		},
		{
			MethodName: "TpmtAssetList",
			Handler:    _Tpmt_TpmtAssetList_Handler,
		},
		{
			MethodName: "TpmtGatewayAdd",
			Handler:    _Tpmt_TpmtGatewayAdd_Handler,
		},
		{
			MethodName: "TpmtGatewayDelete",
			Handler:    _Tpmt_TpmtGatewayDelete_Handler,
		},
		{
			MethodName: "TpmtGatewayUpdate",
			Handler:    _Tpmt_TpmtGatewayUpdate_Handler,
		},
		{
			MethodName: "TpmtGatewayFindOne",
			Handler:    _Tpmt_TpmtGatewayFindOne_Handler,
		},
		{
			MethodName: "TpmtGatewayList",
			Handler:    _Tpmt_TpmtGatewayList_Handler,
		},
		{
			MethodName: "TpmtMonitorPointAdd",
			Handler:    _Tpmt_TpmtMonitorPointAdd_Handler,
		},
		{
			MethodName: "TpmtMonitorPointDelete",
			Handler:    _Tpmt_TpmtMonitorPointDelete_Handler,
		},
		{
			MethodName: "TpmtMonitorPointUpdate",
			Handler:    _Tpmt_TpmtMonitorPointUpdate_Handler,
		},
		{
			MethodName: "TpmtMonitorPointFindOne",
			Handler:    _Tpmt_TpmtMonitorPointFindOne_Handler,
		},
		{
			MethodName: "TpmtMonitorPointList",
			Handler:    _Tpmt_TpmtMonitorPointList_Handler,
		},
		{
			MethodName: "TpmtMonitorPointRealTimeList",
			Handler:    _Tpmt_TpmtMonitorPointRealTimeList_Handler,
		},
		{
			MethodName: "TpmtMonitorPointRealTimeFindOne",
			Handler:    _Tpmt_TpmtMonitorPointRealTimeFindOne_Handler,
		},
		{
			MethodName: "TpmtMonitorPointHistorical",
			Handler:    _Tpmt_TpmtMonitorPointHistorical_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tpmt.proto",
}
