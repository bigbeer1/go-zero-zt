// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tpmtclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TpmtClient is the client API for Tpmt service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TpmtClient interface {
	SysLogin(ctx context.Context, in *SysLoginReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error)
	SysUserAdd(ctx context.Context, in *SysUserAddReq, opts ...grpc.CallOption) (*CommonResp, error)
	SysUserDelete(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*CommonResp, error)
	SysUserUpdate(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*CommonResp, error)
	SysUserFindOne(ctx context.Context, in *SysUserFindOneReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error)
	SysUserList(ctx context.Context, in *SysUserListReq, opts ...grpc.CallOption) (*SysUserListResp, error)
}

type tpmtClient struct {
	cc grpc.ClientConnInterface
}

func NewTpmtClient(cc grpc.ClientConnInterface) TpmtClient {
	return &tpmtClient{cc}
}

func (c *tpmtClient) SysLogin(ctx context.Context, in *SysLoginReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error) {
	out := new(SysUserFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) SysUserAdd(ctx context.Context, in *SysUserAddReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysUserAdd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) SysUserDelete(ctx context.Context, in *SysUserDeleteReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysUserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) SysUserUpdate(ctx context.Context, in *SysUserUpdateReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysUserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) SysUserFindOne(ctx context.Context, in *SysUserFindOneReq, opts ...grpc.CallOption) (*SysUserFindOneResp, error) {
	out := new(SysUserFindOneResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysUserFindOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tpmtClient) SysUserList(ctx context.Context, in *SysUserListReq, opts ...grpc.CallOption) (*SysUserListResp, error) {
	out := new(SysUserListResp)
	err := c.cc.Invoke(ctx, "/tpmtclient.Tpmt/SysUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TpmtServer is the server API for Tpmt service.
// All implementations must embed UnimplementedTpmtServer
// for forward compatibility
type TpmtServer interface {
	SysLogin(context.Context, *SysLoginReq) (*SysUserFindOneResp, error)
	SysUserAdd(context.Context, *SysUserAddReq) (*CommonResp, error)
	SysUserDelete(context.Context, *SysUserDeleteReq) (*CommonResp, error)
	SysUserUpdate(context.Context, *SysUserUpdateReq) (*CommonResp, error)
	SysUserFindOne(context.Context, *SysUserFindOneReq) (*SysUserFindOneResp, error)
	SysUserList(context.Context, *SysUserListReq) (*SysUserListResp, error)
	mustEmbedUnimplementedTpmtServer()
}

// UnimplementedTpmtServer must be embedded to have forward compatible implementations.
type UnimplementedTpmtServer struct {
}

func (UnimplementedTpmtServer) SysLogin(context.Context, *SysLoginReq) (*SysUserFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysLogin not implemented")
}
func (UnimplementedTpmtServer) SysUserAdd(context.Context, *SysUserAddReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserAdd not implemented")
}
func (UnimplementedTpmtServer) SysUserDelete(context.Context, *SysUserDeleteReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserDelete not implemented")
}
func (UnimplementedTpmtServer) SysUserUpdate(context.Context, *SysUserUpdateReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserUpdate not implemented")
}
func (UnimplementedTpmtServer) SysUserFindOne(context.Context, *SysUserFindOneReq) (*SysUserFindOneResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserFindOne not implemented")
}
func (UnimplementedTpmtServer) SysUserList(context.Context, *SysUserListReq) (*SysUserListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SysUserList not implemented")
}
func (UnimplementedTpmtServer) mustEmbedUnimplementedTpmtServer() {}

// UnsafeTpmtServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TpmtServer will
// result in compilation errors.
type UnsafeTpmtServer interface {
	mustEmbedUnimplementedTpmtServer()
}

func RegisterTpmtServer(s grpc.ServiceRegistrar, srv TpmtServer) {
	s.RegisterService(&Tpmt_ServiceDesc, srv)
}

func _Tpmt_SysLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysLogin(ctx, req.(*SysLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_SysUserAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserAddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysUserAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysUserAdd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysUserAdd(ctx, req.(*SysUserAddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_SysUserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysUserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysUserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysUserDelete(ctx, req.(*SysUserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_SysUserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysUserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysUserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysUserUpdate(ctx, req.(*SysUserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_SysUserFindOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserFindOneReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysUserFindOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysUserFindOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysUserFindOne(ctx, req.(*SysUserFindOneReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tpmt_SysUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SysUserListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TpmtServer).SysUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tpmtclient.Tpmt/SysUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TpmtServer).SysUserList(ctx, req.(*SysUserListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tpmt_ServiceDesc is the grpc.ServiceDesc for Tpmt service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tpmt_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tpmtclient.Tpmt",
	HandlerType: (*TpmtServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SysLogin",
			Handler:    _Tpmt_SysLogin_Handler,
		},
		{
			MethodName: "SysUserAdd",
			Handler:    _Tpmt_SysUserAdd_Handler,
		},
		{
			MethodName: "SysUserDelete",
			Handler:    _Tpmt_SysUserDelete_Handler,
		},
		{
			MethodName: "SysUserUpdate",
			Handler:    _Tpmt_SysUserUpdate_Handler,
		},
		{
			MethodName: "SysUserFindOne",
			Handler:    _Tpmt_SysUserFindOne_Handler,
		},
		{
			MethodName: "SysUserList",
			Handler:    _Tpmt_SysUserList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tpmt.proto",
}
